name: Test example positive
on:
#  # Uncomment when test added first time to register workflow and comment it back after workflow would be registered
#  #
#  # Added pull_request to register workflow from the PR.
#  # Read more https://stackoverflow.com/questions/63362126/github-actions-how-to-run-a-workflow-created-on-a-non-master-branch-from-the-wo
#  pull_request: {}
  workflow_dispatch: {}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Do setup"

  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [setup]
    services:
      localstack:
        image: localstack/localstack:1.3.1
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        ports:
          - 4566:4566
          - 4510-4559:4510-4559
    steps:
      - name: Checkout
        uses: actions/checkout@v3

#      - uses: debianmaster/actions-k3s@master
#        id: k3s
#        with:
#          version: 'v1.23.2-k3s1'

      - id: docker-context
        run: |
          docker network ls --filter='name=github_network_*'
          NETWORK_NAME=$(docker network ls --filter='name=github_network_*' --format "{{.Name}}")
          echo "network=${NETWORK_NAME}" >> $GITHUB_OUTPUT

      - uses: AbsaOSS/k3d-action@v2
        id: k3s
        name: "Create Single Cluster"
        with:
          cluster-name: "default"
          args: >-
            -p "8083:80@agent:0:direct"
            -p "8443:443@agent:0:direct"
            -p "5053:53/udp@agent:0:direct"
            -p "6443:6443@server:0:direct"
            --agents 1
            --no-lb
            --network "${{ steps.docker-context.outputs.network }}"
            --image docker.io/rancher/k3s:v1.23.2-k3s1
#            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - run: |
          mkdir -p ${RUNNER_TEMP}/_github_home
          cp ~/.kube/config ${RUNNER_TEMP}/_github_home/kubeconfig
          echo "KUBECONFIG=/github/home/kubeconfig" >> $GITHUB_ENV
          cat ${RUNNER_TEMP}/_github_home/kubeconfig
          docker ps -a

      - name: Update k3s server url
        uses: mikefarah/yq@v4.32.1
        with:
          cmd: yq -i '.clusters[0].server = "https://0.0.0.0:6443"' '/github/home/kubeconfig'

      - run: |
          cat ${RUNNER_TEMP}/_github_home/kubeconfig

      - name: 'Install jq 1.6'
        uses: dcarbone/install-jq-action@v1.0.1
        with:
          version: 1.6
          force: 'true'

      - run: |
          aws ${AWS_ENDPOINT_OVERRIDE:+--endpoint-url $AWS_ENDPOINT_OVERRIDE} ssm put-parameter \
            --name "/platform/default/staging/default_ingress_domain" \
            --type "SecureString" \
            --value "example.com"
          
          aws ${AWS_ENDPOINT_OVERRIDE:+--endpoint-url $AWS_ENDPOINT_OVERRIDE} ssm put-parameter \
            --name "/platform/default/staging/default_alb_ingress_group" \
            --type "SecureString" \
            --value "default" \
            --debug

          aws ${AWS_ENDPOINT_OVERRIDE:+--endpoint-url $AWS_ENDPOINT_OVERRIDE} ssm put-parameter \
            --name "/platform/default/_metadata/kube_version" \
            --type "SecureString" \
            --value "1.15" \
            --debug
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          ## Use localhost to connect localstack because the commands runs not in a container
          AWS_ENDPOINT_OVERRIDE: http://localhost:4566

      - run: |
          mkdir -p ${RUNNER_TEMP}/_github_home/bin/
          echo "${{ steps.aws_mock.outputs.aws }}" > ${RUNNER_TEMP}/_github_home/bin/aws
          chmod +x ${RUNNER_TEMP}/_github_home/bin/aws
          cat ${RUNNER_TEMP}/_github_home/bin/aws
          echo "path=/github/home/bin/:${RUNNER_TEMP}/bin/:${PATH}" >> $GITHUB_OUTPUT


      - name: Mock AWS command
        uses: 1arp/create-a-file-action@0.2
        with:
          path: ${RUNNER_TEMP}/_github_home/bin
          file: aws
          content: |
            #!/bin/bash
            
            if [[ "$1" == "eks" ]]; then
              echo "Skip EKS related commands";
              exit 0;
            fi;
            
            /usr/bin/aws "$@"

      - id: mock
        run: |
          chmod +x ${RUNNER_TEMP}/_github_home/bin/aws
          cat ${RUNNER_TEMP}/_github_home/bin/aws
          echo "path=/github/home/bin/:${RUNNER_TEMP}/bin/:${PATH}" >> $GITHUB_OUTPUT

      - uses: ./
        id: current
        with:
          helmfile-path: ./test
          aws-region: us-east-1
          cluster: default
          environment: staging
          namespace: staging
          image: nginx
          image-tag: latest
          operation: deploy
          debug: false
        env:
          PATH: ${{ steps.mock.outputs.path }}
          PATH_OVERRIDE: ${{ steps.mock.outputs.path }}
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          ## Use localhost to connect localstack because the commands runs not in a container
          AWS_ENDPOINT_OVERRIDE: http://localstack:4566
          ## Use localstack to connect localstack because the chamber runs in a container
          CHAMBER_AWS_SSM_ENDPOINT: http://localstack:4566/

    outputs:
      result: "${{ steps.current.outputs.result1 }}"

  assert:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: nick-fields/assert-action@v1
        with:
          expected: 'true'
          actual: "${{ needs.test.outputs.result }}"

  teardown:
    runs-on: ubuntu-latest
    needs: [assert]
    if: ${{ always() }}
    steps:
      - name: Tear down
        run: echo "Do Tear down"
